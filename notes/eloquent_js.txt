Words with a special meaning, such as let, are keywords, and may
not be used as binding names. There are also a number of words that
are “reserved for use” in future versions of JavaScript, which also can’t
be used as binding names. The full list of keywords and reserved words
is rather long:

break case catch class const continue debugger default
delete do else enum export extends false finally for
function if implements import interface in instanceof let
new package private protected public return static super
switch this throw true try typeof var void while with yield



chapter 2 examples
looping a triangle
    for (let line = "#"; line.length < 8; line += "#")
      console.log(line);

FizzBuzz
Write a program that uses console.log to print all the numbers from 1
to 100, with two exceptions. For numbers divisible by 3, print "Fizz"
instead of the number, and for numbers divisible by 5 (and not 3), print
"Buzz" instead.
When you have that working, modify your program to print "FizzBuzz
" for numbers that are divisible by both 3 and 5 (and still print "Fizz"
or "Buzz" for numbers divisible by only one of those).
(This is actually an interview question that has been claimed to weed
out a significant percentage of programmer candidates. So if you solved
it, your labor market value just went up.)

for (let count = 1; count <= 100; count++) {
    if(count % 5 === 0 && count % 3 === 0) {
        console.log("FizzBuzz");
    } else if(count % 3 === 0) {
        console.log("Fizz");
    } else if(count % 5 === 0 && count % 3 !== 0) {
        console.log("Buzz");
    } else {
        console.log(count)
    }
}

Chessboard
Write a program that creates a string that represents an 8×8 grid, using
newline characters to separate lines. At each position of the grid there
is either a space or a "#" character. The characters should form a
chessboard.
Passing this string to console.log should show something like this:
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #

When you have a program that generates this pattern, define a binding size = 8 and change the program so that it works for any size,
outputting a grid of the given width and height.


let board = ""
let boardWidth = 12
let boardHeight = 12
for(let heightCount = 1; heightCount <= boardHeight; heightCount++) {
    for(let widthCount = 1; widthCount <= boardWidth; widthCount++) {
        if(heightCount % 2 !== 0) {
            if(widthCount % 2 !== 0) {
              board += " "
            } else if (widthCount % 2 === 0) {
              board += "#"
            }
            if(widthCount === boardWidth) {
                board += "\n"
            }
        } else if(heightCount % 2 === 0) {
            if(widthCount % 2 !== 0) {
                board += "#"  
            } else if(widthCount %2 === 0) {
                board += " "
            }
            if(widthCount === boardWidth) {
                board += "\n"
            }
        }
    }
}
console.log(board);