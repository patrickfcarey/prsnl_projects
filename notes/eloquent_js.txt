Words with a special meaning, such as let, are keywords, and may
not be used as binding names. There are also a number of words that
are “reserved for use” in future versions of JavaScript, which also can’t
be used as binding names. The full list of keywords and reserved words
is rather long:

break case catch class const continue debugger default
delete do else enum export extends false finally for
function if implements import interface in instanceof let
new package private protected public return static super
switch this throw true try typeof var void while with yield



chapter 2 examples
looping a triangle
    for (let line = "#"; line.length < 8; line += "#")
      console.log(line);

FizzBuzz
Write a program that uses console.log to print all the numbers from 1
to 100, with two exceptions. For numbers divisible by 3, print "Fizz"
instead of the number, and for numbers divisible by 5 (and not 3), print
"Buzz" instead.
When you have that working, modify your program to print "FizzBuzz
" for numbers that are divisible by both 3 and 5 (and still print "Fizz"
or "Buzz" for numbers divisible by only one of those).
(This is actually an interview question that has been claimed to weed
out a significant percentage of programmer candidates. So if you solved
it, your labor market value just went up.)

for (let count = 1; count <= 100; count++) {
    if(count % 5 === 0 && count % 3 === 0) {
        console.log("FizzBuzz");
    } else if(count % 3 === 0) {
        console.log("Fizz");
    } else if(count % 5 === 0 && count % 3 !== 0) {
        console.log("Buzz");
    } else {
        console.log(count)
    }
}

Chessboard
Write a program that creates a string that represents an 8×8 grid, using
newline characters to separate lines. At each position of the grid there
is either a space or a "#" character. The characters should form a
chessboard.
Passing this string to console.log should show something like this:
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #

When you have a program that generates this pattern, define a binding size = 8 and change the program so that it works for any size,
outputting a grid of the given width and height.


let board = ""
let boardWidth = 12
let boardHeight = 12
for(let heightCount = 1; heightCount <= boardHeight; heightCount++) {
    for(let widthCount = 1; widthCount <= boardWidth; widthCount++) {
        if(heightCount % 2 !== 0) {
            if(widthCount % 2 !== 0) {
              board += " "
            } else if (widthCount % 2 === 0) {
              board += "#"
            }
            if(widthCount === boardWidth) {
                board += "\n"
            }
        } else if(heightCount % 2 === 0) {
            if(widthCount % 2 !== 0) {
                board += "#"  
            } else if(widthCount %2 === 0) {
                board += " "
            }
            if(widthCount === boardWidth) {
                board += "\n"
            }
        }
    }
}
console.log(board);

chapter 3 examples
Exercises
Minimum
The previous chapter introduced the standard function Math.min that returns its smallest argument. We can write a function like that ourselves now. Define the function min that takes two arguments and returns their minimum.

function min(a,b) {
    if(a<b){
       return `${a} is the min`;
    }
    else if(b<a){
        return `${b} is the min`;
    }
    else if(b===a && a===b){
        return "you put the same number in";
    }
}
console.log(min(1,3));
console.log(min(3,1));
console.log(min(1,1));



Recursion
We’ve seen that we can use % (the remainder operator) to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd: 

• Zero is even.
• One is odd.
• For any other number N, its evenness is the same as N - 2.

Define a recursive function isEven corresponding to this description.
The function should accept a single parameter (a positive, whole number) and return a Boolean.
Test it on 50 and 75. See how it behaves on -1. Why? Can you think
of a way to fix this?

function isEven(num) {
    if(num === 0) {
    return true;
    } else if(num === 1){
    return false;
    } else{
        return(isEven(num - 2))
    }
}
console.log(isEven(50));
console.log(isEven(75));




Bean counting
You can get the Nth character, or letter, from a string by writing [N] after the string (for example, string[2]). The resulting value will be a string containing only one character (for example, "b"). The first character has position 0, which causes the last one to be found at position string.length - 1. In other words, a two-character string has length 2, and its characters have positions 0 and 1.

Write a function called countBs that takes a string as its only argument and returns a number that indicates how many uppercase B characters there are in the string.
Next, write a function called countChar that behaves like countBs, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase B characters). Rewrite countBs to make use of this new function.

function countBs(input_string){
    counted = 0;
    for(count = 0; count < input_string.length; count++) {
        if(input_string[count] === "B") {
           counted++;
        }
    }
    return `${counted} instances of B`;
}
console.log(countBs("Bee"));
console.log(countBs("BooBs"));
console.log(countBs("BBs"));
console.log(countBs("batman"));

function countStrCharacter(input_string,search_term){
    counted = 0;
    for(count = 0; count < input_string.length; count++) {
        if(input_string[count] === search_term) {
           counted++;
        }
    }
    return `there are ${counted} instances of ${search_term}`;
}
console.log(countStrCharacter("bees and birds","B"));
console.log(countStrCharacter("bees and birds","b"));
console.log(countStrCharacter("BBs","B"));
console.log(countStrCharacter("batman","B"));


chapter 4 examples

Exercises

The sum of a range
The introduction of this book alluded to the following as a nice way to compute the sum of a range of numbers:
console.log(sum(range(1, 10)));

Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to and including end.
function arrayRange(start,end,step=1){
    let answer = [];
    if(step > 0){ for(count = start; count<=end; count+=step) answer.push(count);}
    else{ for(count = start; count>=end; count+=step) answer.push(count);}
    return answer;
}
console.log(arrayRange(1,10));
Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example program and see whether it does indeed return 55.
function arraySum(array_to_sum){
    let sum = 0;
    for(count=0; count<=array_to_sum.length-1; count++){
       sum = sum + array_to_sum[count];
    }
    return sum;
}
console.log(arraySum(arrayRange(1,10)));

As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” value used when building the array. If no step is given, the elements should go up by increments of one, corresponding to the old behavior. The function call range(1, 10, 2) should return [1, 3, 5, 7, 9]. Make sure this also works with negative step values so that range(5, 2, -1) produces [5, 4, 3, 2].


Reversing an array
Arrays have a reverse method that changes the array by inverting the order in which its elements appear. For this exercise, write two functions, reverseArray and reverseArrayInPlace. The first, reverseArray,should take an array as its argument and produce a new array that has the same elements in the inverse order. The second, reverseArrayInPlace , should do what the reverse method does: modify the array given as its argument by reversing its elements. Neither may use the standard reverse method.

Thinking back to the notes about side effects and pure functions in the previous chapter, which variant do you expect to be useful in more situations? Which one runs faster?

function reverseArray(input_array){
    result_array = [];
    for(let count = input_array.length-1; count>=0;count--){
        result_array.push(input_array[count]);
    }
    return result_array;
}

function reverseArrayInPlace(input_array){
    for(let count = 0; count<(Math.floor(input_array.length /2));count++){
       let old = input_array[count];
       input_array[count] = input_array[input_array.length-1-count];
       input_array[input_array.length-1-count] = old;
    }
    return input_array;
}

Write a function arrayToList that builds up a list structure like the one shown when given [1, 2, 3] as argument. Also write a listToArray function that produces an array from  list. Add the helper functions prepend, which takes an element and a list and creates a new list that adds the element to the front of the input list, and nth, which takes a list and a number and returns the element at the given position in the list (with zero referring to the first element) or undefined when there is no such element.

If you haven’t already, also write a recursive version of nth.

function arrayToList(input_array) {
    let output_list = null;
    for(let count = input_array.length-1; count>=0; count--){
        output_list = {value : input_array[count] , rest :  output_list}
    }
    return output_list;
}

let test_array = [1,2,3];
let test_list = arrayToList(test_array);
console.log(test_list);

let test_list = {value:3, rest: {value:2, rest: {value:1, rest:null}}};

function listToArray(input_list) {
    let output_array = [];
    for(let node = input_list; node; node=node.rest) {
       output_array.push(node.value);
    }
    
    return output_array;
}
console.log(listToArray(test_list));

function prepend(element,input_list) {
    let new_list = {};
    new_list = {value : element, rest : input_list};
    return new_list;
}
console.log(prepend(4,test_list));

function nth(input_list, list_pos) {
    if(!input_list) return undefined;
    else if(list_pos === 0)  return input_list.value;
    else if(list_pos > 0) return nth(input_list.rest,list_pos-1);
}


Deep comparison
The == operator compares objects by identity, but sometimes you’d prefer to compare the values of their actual properties. Write a function deepEqual that takes two values and returns true only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to deepEqual. 
To find out whether values should be compared directly (using the === operator for that) or have their properties compared, you can use the typeof operator. If it produces "object" for both values, you should do a deep comparison. But you have to take one silly exception into account: because of a historical accident, typeof null also produces  "object".
The Object.keys function will be useful when you need to go over the properties of objects to compare them

function deepEqual(value1,value2) {
    if(value1 === value2) return true;

    if(value1 == null && typeof(value1)!="object" 
    && value2 == null && typeof(value2)!="object") {
        return false;
    }

    let keys1 = Object.keys(value1);
    let keys2 = Object.keys(value2);
    
    if (keys1.length != keys2.length){
        return false;
    }

    for(let key of keys1){
        if(!keys2.includes(key) || !deepEqual(value1[key],value2[key])){
            return false;
        }
    }

    return true;
}